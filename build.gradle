plugins {
    id 'java'
    id 'application'
    id 'org.springframework.boot' version '2.6.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.adarshr.test-logger' version '3.2.0'
    id 'jacoco'
}

repositories {
    mavenCentral()
    mavenLocal()
}

def profile = tasks.register('profile') {
    if (project.hasProperty('dev')) return 'dev'
    if (project.hasProperty('ci')) return 'ci'
    if (project.hasProperty('prod')) return 'prod'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.adarshr.test-logger'
    apply plugin: 'jacoco'

    dependencies {
//      Basic Spring dependencies (used by most)
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

//      In-memory database for easy local spin up and testing
        implementation 'com.h2database:h2'

//      Spring Kafka
        implementation 'org.springframework.kafka:spring-kafka'
        implementation 'org.springframework.kafka:spring-kafka-test'
        testImplementation 'org.springframework.kafka:spring-kafka-test'
    }

    task prepareKotlinBuildScriptModel {}
    task wrapper {}

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                element = 'BUNDLE'
                limit {
                    counter = 'INSTRUCTIONS'
                    value = 'COVEREDRATIO'
                    minimum = 0.5
                    failOnViolation(false)
                }
            }
            rule {
                element = 'BUNDLE'
                limit {
                    counter = 'BRANCHES'
                    value = 'COVEREDRATIO'
                    minimum = 0.5
                    failOnViolation(false)
                }
            }
            rule {
                element = 'BUNDLE'
                limit {
                    counter = 'CLASS'
                    value = 'MISSEDRATIO'
                    maximum = 0.5
                    failOnViolation(false)
                }
            }
        }
    }

    test {
        description("Runs all tests")
        useJUnitPlatform()
        doFirst {
            systemProperty 'spring.profiles.active', profile
        }
        finalizedBy jacocoTestReport
    }

    task integrationtest(type: Test) {
        description("Runs all integration tests and heavier tests")
        useJUnitPlatform()
        doFirst {
            systemProperty 'spring.profiles.active', profile
        }
        filter {
            includeTestsMatching '*ApplicationTests'
            includeTestsMatching '*E2ETest'
            includeTestsMatching '*EndToEndTest'
            includeTestsMatching '*End2EndTest'
            includeTestsMatching '*SystemTest'
            includeTestsMatching '*IntegrationTest'
            includeTestsMatching '*MessageTest'
            includeTestsMatching '*EventTest'
            includeTestsMatching '*ConsumerTest'
            includeTestsMatching '*ProducerTest'
            setFailOnNoMatchingTests(false)
        }
        finalizedBy jacocoTestReport
    }

    task unittest(type: Test) {
        description("Runs all Unit tests and tests that don't use the Spring application context")
        useJUnitPlatform()
        doFirst {
            systemProperty 'spring.profiles.active', profile
        }
        filter {
            excludeTestsMatching '*ApplicationTests'
            excludeTestsMatching '*E2ETest'
            excludeTestsMatching '*EndToEndTest'
            excludeTestsMatching '*End2EndTest'
            excludeTestsMatching '*SystemTest'
            excludeTestsMatching '*IntegrationTest'
            excludeTestsMatching '*MessageTest'
            excludeTestsMatching '*EventTest'
            excludeTestsMatching '*ConsumerTest'
            excludeTestsMatching '*ProducerTest'
            setFailOnNoMatchingTests(false)
        }
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            html.enabled true
            csv.enabled false
        }
    }

}

allprojects {
    group = 'com.tungstun'
    version = '0.0.1'
    sourceCompatibility = '17'
    testlogger {
        showSimpleNames true
        theme 'standard'
        if (project.hasProperty('ci')) {
            theme 'mocha'
        }

        if (project.hasProperty('c') || project.hasProperty('compact')) {
            showExceptions false
            showStackTraces false
            showCauses false
            showPassedStandardStreams false
            showSkippedStandardStreams false
            showFailedStandardStreams false
        }
    }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'

    additionalSourceDirs.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(subprojects.sourceSets.main.output)
    executionData.from = files(subprojects.jacocoTestReport.executionData)

    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }

}

test {
    description("Runs all tests and generates an aggragate coverage report")
    dependsOn(subprojects.test)
    finalizedBy(jacocoRootReport)
}
