plugins {
    id 'java'
    id 'application'
    id 'org.springframework.boot' version '2.6.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.adarshr.test-logger' version '3.2.0'
    id 'jacoco'
}

repositories {
    mavenCentral()
    mavenLocal()
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.adarshr.test-logger'
    apply plugin: 'jacoco'

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-webflux'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.kafka:spring-kafka'
        implementation 'org.hibernate.validator:hibernate-validator:6.1.5.Final'
        implementation 'com.h2database:h2'

        implementation 'org.springframework.kafka:spring-kafka-test:2.8.5'
        testImplementation 'org.springframework.kafka:spring-kafka-test:2.8.5'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.security:spring-security-test'
        testImplementation 'io.projectreactor:reactor-test'
        testImplementation 'org.springframework.kafka:spring-kafka-test'
    }
}
allprojects {
    group = 'com.tungstun'
    version = '0.0.1'
    sourceCompatibility = '17'

    def profile
    if (project.hasProperty('dev')) profile = 'dev'
    if (project.hasProperty('ci')) profile = 'ci'
    if (project.hasProperty('prod')) profile = 'prod'


    jacocoTestReport {
        reports {
            xml.required = false
            csv.required = false
//            html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
        }
    }
//    jacocoTestCoverageVerification {
//        violationRules {
//            rule {
//                element 'PACKAGE'
//            }
//        }
//    }

//    jacocoTestCoverageVerification {
//        violationRules {
//            rule {
//                element 'PACKAGE'
////                includes ['com.tungstun.*']
//            }
//            rule {
//                limit {
//                    minimum 0.5
//                }
//            }
//            rule {
//                enabled true
//                element 'CLASS'
//                includes['com.tungstun.*']
//                limit {
//                    counter 'INSTRUCTION'
//                    value 'COVEREDRATIO'
//                    minimum 0.5
//                    failOnViolation false
//                }
//            }
//            rule {
//                enabled true
//                element 'CLASS'
//                includes['com.tungstun.*']
//                limit {
//                    counter 'BRANCH'
//                    value 'COVEREDRATIO'
//                    minimum 0.5
//                    failOnViolation false
//                }
//            }
//
//            rule {
//                enabled true
//                element 'CLASS'
//                includes['com.tungstun.*']
//                limit {
//                    counter 'LINE'
//                    value 'COVEREDRATIO'
//                    minimum 0.5
//                    failOnViolation false
//                }
//            }
//        }
//    }

    test {
        useJUnitPlatform()
        doFirst {
            systemProperty 'spring.profiles.active', profile
        }
        finalizedBy jacocoTestReport
    }

    task unittest(type: Test) {
        description("Runs all tests except Application, Integration and Message Tests")
        useJUnitPlatform()
        doFirst {
            systemProperty 'spring.profiles.active', profile
        }
        filter {
            excludeTestsMatching '*ApplicationTests'
            excludeTestsMatching '*IntegrationTest'
            excludeTestsMatching '*MessageTest'
            setFailOnNoMatchingTests(false)
        }
        finalizedBy jacocoTestReport
    }

    testlogger {
        theme 'mocha'
        showSimpleNames true

        if (project.hasProperty('c') || project.hasProperty('compact')) {
            showExceptions false
            showStackTraces false
            showCauses false
            showPassedStandardStreams false
            showSkippedStandardStreams false
            showFailedStandardStreams false
        }
    }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    println "donedone"
    description = 'Generates an aggregate report from all subprojects'
    dependsOn(subprojects.test)

    additionalSourceDirs.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(subprojects.sourceSets.main.output)
    executionData.from = files(subprojects.jacocoTestReport.executionData)

    reports {
        html.enabled true
    }
}